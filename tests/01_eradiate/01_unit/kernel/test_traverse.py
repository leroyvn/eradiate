import mitsuba as mi

from eradiate.kernel import SceneParameters, mi_traverse

scene_dict = {
    "type": "scene",
    "surface": {
        "type": "rectangle",
        "bsdf": {
            "type": "diffuse",
            "reflectance": {
                "type": "uniform",
                "id": "surface_reflectance",
                "value": 1.0,
            },
        },
    },
    "atmosphere_medium": {
        "type": "homogeneous",
        "phase": {"type": "rayleigh"},
        "albedo": 1.0,
        "sigma_t": {
            "type": "constvolume",
            "value": {"type": "uniform", "id": "atmosphere_sigma_t", "value": 1.0},
        },
    },
    "atmosphere_shape": {
        "type": "cube",
        "bsdf": {"type": "null"},
        "interior": {"type": "ref", "id": "atmosphere_medium"},
    },
}


def test_mi_traverse_basic(mode_mono):
    mi_scene = mi.load_dict(
        {
            "type": "scene",
            "rectangle_1": {
                "type": "rectangle",
                "bsdf": {
                    "type": "diffuse",
                    "reflectance": {
                        "type": "uniform",
                        "id": "diffuse_reflectance",
                        "value": 1.0,
                    },
                },
            },
        }
    )

    params = mi_traverse(mi_scene)

    # Traversal succeeds
    assert isinstance(params, SceneParameters)

    # The parameter map is identical to the one generated by the stock traversal
    # routine
    params_stock = mi.traverse(mi_scene)
    assert set(params.keys()) == set(params_stock.keys())

    # Aliases are collected and point to the expected parameter
    assert params.aliases == {
        "diffuse_reflectance.value": "rectangle_1.bsdf.reflectance.value"
    }


def test_mi_traverse_predictable(mode_mono):
    scene: mi.Scene = mi.load_dict(scene_dict)
    params = mi_traverse(scene)

    # Plugin parameters are referenced by IDs reflecting the scene dict structure
    assert set(params.keys()) == {
        "atmosphere_medium.albedo.value.value",
        "atmosphere_medium.scale",
        "atmosphere_medium.sigma_t.value.value",
        "atmosphere_shape.face_count",
        "atmosphere_shape.faces",
        "atmosphere_shape.vertex_count",
        "atmosphere_shape.vertex_normals",
        "atmosphere_shape.vertex_positions",
        "atmosphere_shape.vertex_texcoords",
        "surface.bsdf.reflectance.value",
        "surface.to_world",
    }

    # Object ID-based aliases reference hard-to-predict parameter IDs
    assert params.aliases == {
        "surface_reflectance.value": "surface.bsdf.reflectance.value",
        "atmosphere_sigma_t.value": "atmosphere_medium.sigma_t.value.value",
    }

    # Parameters can be accesses through their aliases
    assert params["atmosphere_sigma_t.value"] == 1.0

    # They can also be modified
    params["atmosphere_sigma_t.value"] = 2.0
    assert params.update_candidates.keys() == {"atmosphere_medium.sigma_t.value.value"}


def test_mi_traverse_unpredictable(mode_mono):
    scene = mi.load_dict(
        {
            **scene_dict,
            **{
                "_camera": {
                    "type": "perspective",
                    "medium": {"type": "ref", "id": "atmosphere_medium"},
                }
            },
        }
    )
    params = mi_traverse(scene)

    # "atmosphere_medium" shows up as a child of the sensor because its parameter
    # ID appears first in the alphabetical order
    assert set(params.keys()) == {
        "_camera.far_clip",
        "_camera.film.crop_offset",
        "_camera.film.crop_size",
        "_camera.film.size",
        "_camera.medium.albedo.value.value",
        "_camera.medium.scale",
        "_camera.medium.sigma_t.value.value",
        "_camera.near_clip",
        "_camera.shutter_open",
        "_camera.shutter_open_time",
        "_camera.to_world",
        "_camera.x_fov",
        "atmosphere_shape.face_count",
        "atmosphere_shape.faces",
        "atmosphere_shape.vertex_count",
        "atmosphere_shape.vertex_normals",
        "atmosphere_shape.vertex_positions",
        "atmosphere_shape.vertex_texcoords",
        "surface.bsdf.reflectance.value",
        "surface.to_world",
    }

    # Predictable object ID-based aliases reference hard-to-predict parameter IDs
    assert params.aliases == {
        "atmosphere_medium.scale": "_camera.medium.scale",
        "atmosphere_sigma_t.value": "_camera.medium.sigma_t.value.value",
        "surface_reflectance.value": "surface.bsdf.reflectance.value",
    }

    # Trimming param IDs using an alias also works
    params.keep("atmosphere_sigma_t.*")
    assert set(params.keys()) == {"_camera.medium.sigma_t.value.value"}
    assert params.aliases == {
        "atmosphere_sigma_t.value": "_camera.medium.sigma_t.value.value"
    }
